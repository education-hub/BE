// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/education-hub/BE/app/entities"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// SchoolRepo is an autogenerated mock type for the SchoolRepo type
type SchoolRepo struct {
	mock.Mock
}

// AddAchievement provides a mock function with given fields: db, achv
func (_m *SchoolRepo) AddAchievement(db *gorm.DB, achv entities.Achievement) (int, error) {
	ret := _m.Called(db, achv)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Achievement) (int, error)); ok {
		return rf(db, achv)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Achievement) int); ok {
		r0 = rf(db, achv)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, entities.Achievement) error); ok {
		r1 = rf(db, achv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddExtracurricular provides a mock function with given fields: db, achv
func (_m *SchoolRepo) AddExtracurricular(db *gorm.DB, achv entities.Extracurricular) (int, error) {
	ret := _m.Called(db, achv)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Extracurricular) (int, error)); ok {
		return rf(db, achv)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Extracurricular) int); ok {
		r0 = rf(db, achv)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, entities.Extracurricular) error); ok {
		r1 = rf(db, achv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: db, school
func (_m *SchoolRepo) Create(db *gorm.DB, school entities.School) (int, error) {
	ret := _m.Called(db, school)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.School) (int, error)); ok {
		return rf(db, school)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.School) int); ok {
		r0 = rf(db, school)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, entities.School) error); ok {
		r1 = rf(db, school)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAchievement provides a mock function with given fields: db, id
func (_m *SchoolRepo) DeleteAchievement(db *gorm.DB, id int) error {
	ret := _m.Called(db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) error); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExtracurricular provides a mock function with given fields: db, id
func (_m *SchoolRepo) DeleteExtracurricular(db *gorm.DB, id int) error {
	ret := _m.Called(db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) error); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByNPSN provides a mock function with given fields: db, npsn
func (_m *SchoolRepo) FindByNPSN(db *gorm.DB, npsn string) error {
	ret := _m.Called(db, npsn)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(db, npsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: db, id
func (_m *SchoolRepo) GetById(db *gorm.DB, id int) (*entities.School, error) {
	ret := _m.Called(db, id)

	var r0 *entities.School
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) (*entities.School, error)); ok {
		return rf(db, id)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) *entities.School); ok {
		r0 = rf(db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.School)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, int) error); ok {
		r1 = rf(db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUid provides a mock function with given fields: db, uid
func (_m *SchoolRepo) GetByUid(db *gorm.DB, uid int) (*entities.School, error) {
	ret := _m.Called(db, uid)

	var r0 *entities.School
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) (*entities.School, error)); ok {
		return rf(db, uid)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) *entities.School); ok {
		r0 = rf(db, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.School)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, int) error); ok {
		r1 = rf(db, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: db, school
func (_m *SchoolRepo) Update(db *gorm.DB, school entities.School) (*entities.School, error) {
	ret := _m.Called(db, school)

	var r0 *entities.School
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.School) (*entities.School, error)); ok {
		return rf(db, school)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.School) *entities.School); ok {
		r0 = rf(db, school)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.School)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, entities.School) error); ok {
		r1 = rf(db, school)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAchievement provides a mock function with given fields: db, achv
func (_m *SchoolRepo) UpdateAchievement(db *gorm.DB, achv entities.Achievement) (*entities.Achievement, error) {
	ret := _m.Called(db, achv)

	var r0 *entities.Achievement
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Achievement) (*entities.Achievement, error)); ok {
		return rf(db, achv)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Achievement) *entities.Achievement); ok {
		r0 = rf(db, achv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Achievement)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, entities.Achievement) error); ok {
		r1 = rf(db, achv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtracurricular provides a mock function with given fields: db, achv
func (_m *SchoolRepo) UpdateExtracurricular(db *gorm.DB, achv entities.Extracurricular) (*entities.Extracurricular, error) {
	ret := _m.Called(db, achv)

	var r0 *entities.Extracurricular
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Extracurricular) (*entities.Extracurricular, error)); ok {
		return rf(db, achv)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, entities.Extracurricular) *entities.Extracurricular); ok {
		r0 = rf(db, achv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Extracurricular)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, entities.Extracurricular) error); ok {
		r1 = rf(db, achv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSchoolRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSchoolRepo creates a new instance of SchoolRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchoolRepo(t mockConstructorTestingTNewSchoolRepo) *SchoolRepo {
	mock := &SchoolRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
