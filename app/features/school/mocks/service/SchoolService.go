// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/education-hub/BE/app/entities"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// SchoolService is an autogenerated mock type for the SchoolService type
type SchoolService struct {
	mock.Mock
}

// AddAchievement provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) AddAchievement(ctx context.Context, req entities.ReqAddAchievemnt, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddAchievemnt, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddAchievemnt, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddAchievemnt, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddExtracurricular provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) AddExtracurricular(ctx context.Context, req entities.ReqAddExtracurricular, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddExtracurricular, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddExtracurricular, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddExtracurricular, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFaq provides a mock function with given fields: ctx, req
func (_m *SchoolService) AddFaq(ctx context.Context, req entities.ReqAddFaq) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddFaq) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddFaq) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddFaq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPayment provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) AddPayment(ctx context.Context, req entities.ReqAddPayment, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddPayment, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddPayment, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddPayment, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, req, image, pdf
func (_m *SchoolService) Create(ctx context.Context, req entities.ReqCreateSchool, image multipart.File, pdf multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image, pdf)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) (int, error)); ok {
		return rf(ctx, req, image, pdf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) int); ok {
		r0 = rf(ctx, req, image, pdf)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) error); ok {
		r1 = rf(ctx, req, image, pdf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAchievement provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeleteAchievement(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExtracurricular provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeleteExtracurricular(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFaq provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeleteFaq(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePayment provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeletePayment(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUid provides a mock function with given fields: ctx, uid
func (_m *SchoolService) GetByUid(ctx context.Context, uid int) (*entities.ResDetailSchool, error) {
	ret := _m.Called(ctx, uid)

	var r0 *entities.ResDetailSchool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.ResDetailSchool, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.ResDetailSchool); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResDetailSchool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByid provides a mock function with given fields: ctx, id
func (_m *SchoolService) GetByid(ctx context.Context, id int) (*entities.ResDetailSchool, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.ResDetailSchool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.ResDetailSchool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.ResDetailSchool); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResDetailSchool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: searchval
func (_m *SchoolService) Search(searchval string) interface{} {
	ret := _m.Called(searchval)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(searchval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, req, image, pdf
func (_m *SchoolService) Update(ctx context.Context, req entities.ReqUpdateSchool, image multipart.File, pdf multipart.File) (*entities.ResUpdateSchool, error) {
	ret := _m.Called(ctx, req, image, pdf)

	var r0 *entities.ResUpdateSchool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateSchool, multipart.File, multipart.File) (*entities.ResUpdateSchool, error)); ok {
		return rf(ctx, req, image, pdf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateSchool, multipart.File, multipart.File) *entities.ResUpdateSchool); ok {
		r0 = rf(ctx, req, image, pdf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResUpdateSchool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateSchool, multipart.File, multipart.File) error); ok {
		r1 = rf(ctx, req, image, pdf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAchievement provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) UpdateAchievement(ctx context.Context, req entities.ReqUpdateAchievemnt, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateAchievemnt, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateAchievemnt, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateAchievemnt, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtracurricular provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) UpdateExtracurricular(ctx context.Context, req entities.ReqUpdateExtracurricular, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateExtracurricular, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateExtracurricular, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateExtracurricular, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFaq provides a mock function with given fields: ctx, req
func (_m *SchoolService) UpdateFaq(ctx context.Context, req entities.ReqUpdateFaq) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateFaq) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateFaq) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateFaq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) UpdatePayment(ctx context.Context, req entities.ReqUpdatePayment, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdatePayment, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdatePayment, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdatePayment, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSchoolService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSchoolService creates a new instance of SchoolService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchoolService(t mockConstructorTestingTNewSchoolService) *SchoolService {
	mock := &SchoolService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
