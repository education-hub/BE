// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/education-hub/BE/app/entities"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// SchoolService is an autogenerated mock type for the SchoolService type
type SchoolService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req, image, pdf
func (_m *SchoolService) Create(ctx context.Context, req entities.ReqCreateSchool, image multipart.File, pdf multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image, pdf)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) (int, error)); ok {
		return rf(ctx, req, image, pdf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) int); ok {
		r0 = rf(ctx, req, image, pdf)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) error); ok {
		r1 = rf(ctx, req, image, pdf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSchoolService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSchoolService creates a new instance of SchoolService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchoolService(t mockConstructorTestingTNewSchoolService) *SchoolService {
	mock := &SchoolService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
