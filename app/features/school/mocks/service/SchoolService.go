// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/education-hub/BE/app/entities"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	pkg "github.com/education-hub/BE/pkg"
)

// SchoolService is an autogenerated mock type for the SchoolService type
type SchoolService struct {
	mock.Mock
}

// AddAchievement provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) AddAchievement(ctx context.Context, req entities.ReqAddAchievemnt, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddAchievemnt, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddAchievemnt, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddAchievemnt, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddExtracurricular provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) AddExtracurricular(ctx context.Context, req entities.ReqAddExtracurricular, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddExtracurricular, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddExtracurricular, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddExtracurricular, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFaq provides a mock function with given fields: ctx, req
func (_m *SchoolService) AddFaq(ctx context.Context, req entities.ReqAddFaq) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddFaq) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddFaq) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddFaq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPayment provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) AddPayment(ctx context.Context, req entities.ReqAddPayment, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddPayment, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqAddPayment, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqAddPayment, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddReview provides a mock function with given fields: ctx, req
func (_m *SchoolService) AddReview(ctx context.Context, req entities.Reviews) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Reviews) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Reviews) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Reviews) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, req, image, pdf
func (_m *SchoolService) Create(ctx context.Context, req entities.ReqCreateSchool, image multipart.File, pdf multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image, pdf)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) (int, error)); ok {
		return rf(ctx, req, image, pdf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) int); ok {
		r0 = rf(ctx, req, image, pdf)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqCreateSchool, multipart.File, multipart.File) error); ok {
		r1 = rf(ctx, req, image, pdf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuiz provides a mock function with given fields: ctx, req
func (_m *SchoolService) CreateQuiz(ctx context.Context, req []entities.ReqAddQuiz) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entities.ReqAddQuiz) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSubmission provides a mock function with given fields: ctx, req, studentph, signstudent, signparent
func (_m *SchoolService) CreateSubmission(ctx context.Context, req entities.ReqCreateSubmission, studentph multipart.File, signstudent multipart.File, signparent multipart.File) (int, error) {
	ret := _m.Called(ctx, req, studentph, signstudent, signparent)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSubmission, multipart.File, multipart.File, multipart.File) (int, error)); ok {
		return rf(ctx, req, studentph, signstudent, signparent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCreateSubmission, multipart.File, multipart.File, multipart.File) int); ok {
		r0 = rf(ctx, req, studentph, signstudent, signparent)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqCreateSubmission, multipart.File, multipart.File, multipart.File) error); ok {
		r1 = rf(ctx, req, studentph, signstudent, signparent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id, uid
func (_m *SchoolService) Delete(ctx context.Context, id int, uid int) error {
	ret := _m.Called(ctx, id, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAchievement provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeleteAchievement(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExtracurricular provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeleteExtracurricular(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFaq provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeleteFaq(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePayment provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeletePayment(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProgressByid provides a mock function with given fields: ctx, id
func (_m *SchoolService) DeleteProgressByid(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, page, limit, search
func (_m *SchoolService) GetAll(ctx context.Context, page int, limit int, search string) (*entities.Response, error) {
	ret := _m.Called(ctx, page, limit, search)

	var r0 *entities.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) (*entities.Response, error)); ok {
		return rf(ctx, page, limit, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) *entities.Response); ok {
		r0 = rf(ctx, page, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = rf(ctx, page, limit, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProgressAndSubmissionByuid provides a mock function with given fields: ctx, uid
func (_m *SchoolService) GetAllProgressAndSubmissionByuid(ctx context.Context, uid int) ([]entities.ResAllProgressSubmission, error) {
	ret := _m.Called(ctx, uid)

	var r0 []entities.ResAllProgressSubmission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entities.ResAllProgressSubmission, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entities.ResAllProgressSubmission); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ResAllProgressSubmission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProgressByUid provides a mock function with given fields: ctx, uid
func (_m *SchoolService) GetAllProgressByUid(ctx context.Context, uid int) ([]entities.ResAllProgress, error) {
	ret := _m.Called(ctx, uid)

	var r0 []entities.ResAllProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entities.ResAllProgress, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entities.ResAllProgress); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ResAllProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUid provides a mock function with given fields: ctx, uid
func (_m *SchoolService) GetByUid(ctx context.Context, uid int) (*entities.ResDetailSchool, error) {
	ret := _m.Called(ctx, uid)

	var r0 *entities.ResDetailSchool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.ResDetailSchool, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.ResDetailSchool); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResDetailSchool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByid provides a mock function with given fields: ctx, id
func (_m *SchoolService) GetByid(ctx context.Context, id int) (*entities.ResDetailSchool, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.ResDetailSchool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.ResDetailSchool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.ResDetailSchool); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResDetailSchool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProgressById provides a mock function with given fields: ctx, id
func (_m *SchoolService) GetProgressById(ctx context.Context, id int) (*entities.ResDetailProgress, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.ResDetailProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.ResDetailProgress, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.ResDetailProgress); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResDetailProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubmissionByid provides a mock function with given fields: ctx, id
func (_m *SchoolService) GetSubmissionByid(ctx context.Context, id int) (*entities.ResDetailSubmission, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.ResDetailSubmission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.ResDetailSubmission, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.ResDetailSubmission); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResDetailSubmission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestResult provides a mock function with given fields: ctx, uid
func (_m *SchoolService) GetTestResult(ctx context.Context, uid int) ([]pkg.TestResult, error) {
	ret := _m.Called(ctx, uid)

	var r0 []pkg.TestResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]pkg.TestResult, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []pkg.TestResult); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.TestResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: searchval
func (_m *SchoolService) Search(searchval string) interface{} {
	ret := _m.Called(searchval)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(searchval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, req, image, pdf
func (_m *SchoolService) Update(ctx context.Context, req entities.ReqUpdateSchool, image multipart.File, pdf multipart.File) (*entities.ResUpdateSchool, error) {
	ret := _m.Called(ctx, req, image, pdf)

	var r0 *entities.ResUpdateSchool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateSchool, multipart.File, multipart.File) (*entities.ResUpdateSchool, error)); ok {
		return rf(ctx, req, image, pdf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateSchool, multipart.File, multipart.File) *entities.ResUpdateSchool); ok {
		r0 = rf(ctx, req, image, pdf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResUpdateSchool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateSchool, multipart.File, multipart.File) error); ok {
		r1 = rf(ctx, req, image, pdf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAchievement provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) UpdateAchievement(ctx context.Context, req entities.ReqUpdateAchievemnt, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateAchievemnt, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateAchievemnt, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateAchievemnt, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtracurricular provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) UpdateExtracurricular(ctx context.Context, req entities.ReqUpdateExtracurricular, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateExtracurricular, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateExtracurricular, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateExtracurricular, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFaq provides a mock function with given fields: ctx, req
func (_m *SchoolService) UpdateFaq(ctx context.Context, req entities.ReqUpdateFaq) (int, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateFaq) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdateFaq) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdateFaq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: ctx, req, image
func (_m *SchoolService) UpdatePayment(ctx context.Context, req entities.ReqUpdatePayment, image multipart.File) (int, error) {
	ret := _m.Called(ctx, req, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdatePayment, multipart.File) (int, error)); ok {
		return rf(ctx, req, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqUpdatePayment, multipart.File) int); ok {
		r0 = rf(ctx, req, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqUpdatePayment, multipart.File) error); ok {
		r1 = rf(ctx, req, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProgressByid provides a mock function with given fields: ctx, id, status
func (_m *SchoolService) UpdateProgressByid(ctx context.Context, id int, status string) (int, error) {
	ret := _m.Called(ctx, id, status)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (int, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) int); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSchoolService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSchoolService creates a new instance of SchoolService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchoolService(t mockConstructorTestingTNewSchoolService) *SchoolService {
	mock := &SchoolService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
