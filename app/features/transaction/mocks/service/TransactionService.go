// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/education-hub/BE/app/entities"
	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: ctx, req, uid
func (_m *TransactionService) CreateTransaction(ctx context.Context, req entities.ReqCheckout, uid int) (*entities.ResTransaction, error) {
	ret := _m.Called(ctx, req, uid)

	var r0 *entities.ResTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCheckout, int) (*entities.ResTransaction, error)); ok {
		return rf(ctx, req, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReqCheckout, int) *entities.ResTransaction); ok {
		r0 = rf(ctx, req, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ResTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ReqCheckout, int) error); ok {
		r1 = rf(ctx, req, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTrasactionCart provides a mock function with given fields: ctx, uid
func (_m *TransactionService) GetAllTrasactionCart(ctx context.Context, uid int) ([]entities.ResGetAllTrasaction, error) {
	ret := _m.Called(ctx, uid)

	var r0 []entities.ResGetAllTrasaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entities.ResGetAllTrasaction, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entities.ResGetAllTrasaction); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ResGetAllTrasaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailTransaction provides a mock function with given fields: ctx, schid, uid
func (_m *TransactionService) GetDetailTransaction(ctx context.Context, schid int, uid int) (interface{}, error) {
	ret := _m.Called(ctx, schid, uid)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (interface{}, error)); ok {
		return rf(ctx, schid, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) interface{}); ok {
		r0 = rf(ctx, schid, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, schid, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, status, invoice
func (_m *TransactionService) UpdateStatus(ctx context.Context, status string, invoice string) error {
	ret := _m.Called(ctx, status, invoice)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, status, invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
